{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACAD,EAAAE,OAAOC,KAAK,CAAEC,SAAS,IAEvB,IAAMC,EAAOC,SAASC,cAAc,SAEhCC,EAAS,CACXC,MAAO,KACPC,KAAM,KACNC,OAAQ,MAiCV,SAASC,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEF,WAAUJ,UAGpBO,EAAO,CAAEH,WAAUJ,S,GAEpBA,E,IAzCPJ,EAAKgB,iBAAiB,UAGtB,SAAsBC,GACpBA,EAAEC,iBAUJ,SAA2BC,G,IAAEC,EAAFD,EAAEf,MAAOC,EAATc,EAASd,KAAMC,EAAfa,EAAeb,OACpCe,EAAQ,EACZ,KAAOA,GAASf,GAEdC,EAAcc,EAAOD,GAClBE,MAAK,SAAAC,G,IAAGf,EAAQe,EAARf,SAAUJ,EAAKmB,EAALnB,MACjBT,EAAAE,OAAO2B,QAAQ,uBAAwCC,OAAfjB,EAAS,QAAYiB,OAANrB,EAAM,M,IAE9DsB,OAAM,SAAAH,G,IAAGf,EAAQe,EAARf,SAAUJ,EAAKmB,EAALnB,MAClBT,EAAAE,OAAO8B,QAAQ,sBAAqCF,OAAfjB,EAAS,QAAYiB,OAANrB,EAAM,M,IAE9DgB,GAASf,EACTgB,G,CArBFO,CAAkBzB,E,IAJpBH,EAAKgB,iBAAiB,UAOtB,SAAsBC,GACpB,IAAMY,EAAOZ,EAAEa,OAAOD,KAChBE,EAAQC,OAAOC,SAAShB,EAAEa,OAAOC,OACvC5B,EAAO0B,GAAQE,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nNotify.init({ useIcon: false,});\n\nconst form = document.querySelector('.form');\n\nlet params = {\n  delay: null,\n  step: null,\n  amount: null,\n};\n\nform.addEventListener('submit', onSubmitForm);\nform.addEventListener('change', onChangeForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n  makeArrayPromises(params);\n}\n\nfunction onChangeForm(e) {\n  const name = e.target.name;\n  const value = Number.parseInt(e.target.value);\n  params[name] = value;\n}\n\nfunction makeArrayPromises({ delay, step, amount }) {\n  let count = 1;\n  while (count <= amount)\n  {    \n    createPromise(count, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n    count++;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$h6c0i","parcelRequire","Notify","init","useIcon","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$params","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","param1","delay1","count","then","param","success","concat","catch","failure","$ce04d3a99e08e73b$var$makeArrayPromises","name","target","value","Number","parseInt"],"version":3,"file":"03-promises.2a949dd1.js.map"}